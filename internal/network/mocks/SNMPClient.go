// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	network "github.com/inexio/thola/internal/network"
	mock "github.com/stretchr/testify/mock"
)

// SNMPClient is an autogenerated mock type for the SNMPClient type
type SNMPClient struct {
	mock.Mock
}

// Disconnect provides a mock function with given fields:
func (_m *SNMPClient) Disconnect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommunity provides a mock function with given fields:
func (_m *SNMPClient) GetCommunity() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMaxRepetitions provides a mock function with given fields:
func (_m *SNMPClient) GetMaxRepetitions() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

// GetPort provides a mock function with given fields:
func (_m *SNMPClient) GetPort() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetV3AuthKey provides a mock function with given fields:
func (_m *SNMPClient) GetV3AuthKey() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetV3AuthProto provides a mock function with given fields:
func (_m *SNMPClient) GetV3AuthProto() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetV3ContextName provides a mock function with given fields:
func (_m *SNMPClient) GetV3ContextName() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetV3Level provides a mock function with given fields:
func (_m *SNMPClient) GetV3Level() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetV3PrivKey provides a mock function with given fields:
func (_m *SNMPClient) GetV3PrivKey() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetV3PrivProto provides a mock function with given fields:
func (_m *SNMPClient) GetV3PrivProto() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetV3User provides a mock function with given fields:
func (_m *SNMPClient) GetV3User() *string {
	ret := _m.Called()

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetVersion provides a mock function with given fields:
func (_m *SNMPClient) GetVersion() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HasSuccessfulCachedRequest provides a mock function with given fields:
func (_m *SNMPClient) HasSuccessfulCachedRequest() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SNMPGet provides a mock function with given fields: ctx, oid
func (_m *SNMPClient) SNMPGet(ctx context.Context, oid ...string) ([]network.SNMPResponse, error) {
	_va := make([]interface{}, len(oid))
	for _i := range oid {
		_va[_i] = oid[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []network.SNMPResponse
	if rf, ok := ret.Get(0).(func(context.Context, ...string) []network.SNMPResponse); ok {
		r0 = rf(ctx, oid...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.SNMPResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, oid...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SNMPWalk provides a mock function with given fields: ctx, oid
func (_m *SNMPClient) SNMPWalk(ctx context.Context, oid string) ([]network.SNMPResponse, error) {
	ret := _m.Called(ctx, oid)

	var r0 []network.SNMPResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) []network.SNMPResponse); ok {
		r0 = rf(ctx, oid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.SNMPResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, oid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCommunity provides a mock function with given fields: community
func (_m *SNMPClient) SetCommunity(community string) {
	_m.Called(community)
}

// SetMaxOIDs provides a mock function with given fields: maxOIDs
func (_m *SNMPClient) SetMaxOIDs(maxOIDs int) error {
	ret := _m.Called(maxOIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(maxOIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMaxRepetitions provides a mock function with given fields: maxRepetitions
func (_m *SNMPClient) SetMaxRepetitions(maxRepetitions uint32) {
	_m.Called(maxRepetitions)
}

// UseCache provides a mock function with given fields: b
func (_m *SNMPClient) UseCache(b bool) {
	_m.Called(b)
}
